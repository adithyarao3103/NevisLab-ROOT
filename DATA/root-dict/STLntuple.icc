// 01-Jun-2023 WGS:
// Definitions of structures for STL+ROOT testing.

// Given that this file is included in the middle of a piece of C++
// code, rather than at the beginning, the following #include
// statements probably don't do anything. They just help document the
// classes we're using.
#include "STL_TrackList.h"
#include <vector>
#include <map>
#include <tuple>
#include <utility>

// For more exotic STL containers, we have to create
// dictionaries. 
// See https://root.cern.ch/doc/master/classTCling.html#a379ddc97e87bdb91b579a534101eef49

// For the following commands to work, the calling program must
// include the following amongst its headers; otherwise 'gInterpreter'
// won't be defined:

// #include "TInterpreter.h"

// The first argument to GenerateDictionary is the structure for which
// a dictionary must be generated. (You can supply a basic class like
// "double" or "vector<int>", but ROOT already has those built-in.)

// The second argument is a list of C++ header files that the ROOT
// dictionary generator must #include in order for the structure to
// compile. For example, the argument in the third line of
// "STL_TrackList.h;map;vector" means that the dictionary generator
// will include the following lines in its code:

// #include <STL_TrackList.h>
// #include <map>
// #include <vector>

// If your gInterpreter line starts complaining that a given class is
// not defined, it probably means that you didn't include its header
// in the list.

// When the following lines are executed, if a previous program
// created these dictionaries, ROOT's TInterpreter class will quickly
// exit. If the dictionaries or don't exist, or their definition has
// been updated, the program will pause for a while as it generates
// fresh dictionaries. You'll see the dictionary work files afterwards
// in your directory, with names that begin with "AutoDict".

gInterpreter->GenerateDictionary("map<int,double>", "map");
gInterpreter->GenerateDictionary("map<tuple<int,int>, double>", "map;tuple");
gInterpreter->GenerateDictionary("TrackList", "STL_TrackList.h;map;vector");
